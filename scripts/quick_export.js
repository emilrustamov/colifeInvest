const { Pool } = require('pg');
const fs = require('fs').promises;

// –ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
async function quickExport() {
  const pool = new Pool({
    user: process.env.DB_USER || 'myuser',
    host: process.env.DB_HOST || 'localhost',
    database: process.env.DB_NAME || 'colife',
    password: process.env.DB_PASSWORD || 'mypassword',
    port: process.env.DB_PORT || 5432,
  });

  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...');
    const client = await pool.connect();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);

    let output = `# üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ${process.env.DB_NAME || 'colife'}

## üóÇÔ∏è –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü (${tables.rows.length})

`;

    for (const table of tables.rows) {
      const tableName = table.table_name;
      console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${tableName}`);

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      const columns = await client.query(`
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_default
        FROM information_schema.columns 
        WHERE table_name = $1 
        ORDER BY ordinal_position
      `, [tableName]);

      output += `## üìã ${tableName}\n\n`;
      output += `| –ü–æ–ª–µ | –¢–∏–ø | Null | –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é |\n`;
      output += `|------|-----|------|---------------|\n`;

      for (const col of columns.rows) {
        const nullable = col.is_nullable === 'YES' ? '‚úÖ' : '‚ùå';
        const defaultValue = col.column_default || '-';
        output += `| \`${col.column_name}\` | \`${col.data_type}\` | ${nullable} | \`${defaultValue}\` |\n`;
      }

      output += `\n---\n\n`;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    await fs.writeFile('database-structure.md', output, 'utf8');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ database-structure.md');

    client.release();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

quickExport();

const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const { config, validateConfig } = require("./config");
const SyncService = require("./services/sync");
const DatabaseService = require("./services/database");

const app = express();
const server = http.createServer(app);
const io = new Server(server);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let syncService, dbService;

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try {
  validateConfig();
  dbService = new DatabaseService();
  syncService = new SyncService(dbService); // –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseService
} catch (error) {
  console.error('‚ùå Configuration error:', error.message);
  process.exit(1);
}

app.use(express.static("public"));
app.get("/", (req, res) => res.sendFile(__dirname + "/public/index.html"));

// –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç SyncService
async function loadPipelines() {
  try {
    await syncService.loadPipelines();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫:", err.message);
  }
}

async function loadStages() {
  try {
    await syncService.loadStages();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–¥–∏–π:", err.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è syncDealContacts —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ SyncService

// –§—É–Ω–∫—Ü–∏—è normalizePhones —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ SyncService

// –§—É–Ω–∫—Ü–∏—è delay —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ SyncService

async function loadContactsBatch(contactIds) {
  try {
    await syncService.loadContactsBatch(contactIds);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:", err.message);
  }
}

async function loadDeals(start = 0, manual = false) {
  try {
    await syncService.loadDeals(start, manual);
    if (manual) io.emit("load-complete", { success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:", err.message);
    if (manual) io.emit("load-complete", { success: false, error: err.message });
  }
}



// ==== WebSocket ====
io.on("connection", (socket) => {
  console.log("New client connected (socket.id):", socket.id);

  socket.on("manual-load", async () => {
    console.log("Manual load triggered by client", socket.id);
    try {
      await loadDeals(0, true);
      // loadDeals —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç io.emit("load-complete"), –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
      console.log("Manual load complete");
    } catch (err) {
      console.error("Error in manual-load:", err);
      socket.emit("load-complete", { success: false, error: err.message });
    }
  });
  sendFilters(socket); // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã

  socket.on("load-page", async ({ page, pipelineId, stageId, search }) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validatedPage = Math.max(1, parseInt(page) || 1);
      const validatedPipelineId = pipelineId && !isNaN(Number(pipelineId)) ? Number(pipelineId) : null;
      const validatedStageId = stageId && !isNaN(Number(stageId)) ? Number(stageId) : null;
      const validatedSearch = typeof search === 'string' ? search.trim() : '';

      const filters = { 
        pipelineId: validatedPipelineId, 
        stageId: validatedStageId, 
        search: validatedSearch 
      };
      
      const result = await dbService.getDealsWithFilters(filters, validatedPage, 100);
      
      socket.emit("total-count", result.total);
      socket.emit("page-data", result.data);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", err.message);
      socket.emit("page-data", []);
      socket.emit("total-count", 0);
    }
  });

  socket.on("validate-phones", async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ pool
      const allContactIds = await dbService.getAllContactIds();
      console.log(
        `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è ${allContactIds.length} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...`
      );
      await loadContactsBatch(allContactIds);
      socket.emit("phones-validated", { success: true });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:", err.message);
      socket.emit("phones-validated", { success: false, error: err.message });
    }
  });

  socket.on("load-contacts", async () => {
    console.log("Server: load-contacts received from socket.id=", socket.id);
    try {
      const contacts = await dbService.getAllContacts();
      socket.emit("contacts-data", contacts);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ load-contacts:", err);
      socket.emit("contacts-data", []);
    }
  });

  socket.on("delete-contact", async ({ contactId }) => {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!contactId || isNaN(Number(contactId))) {
        socket.emit("delete-result", {
          success: false,
          message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–æ–Ω—Ç–∞–∫—Ç–∞",
        });
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å–µ—Ä–≤–∏—Å–∞
      const result = await dbService.deleteContact(Number(contactId));
      socket.emit("delete-result", result);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ delete-contact:", err.message);
      socket.emit("delete-result", { success: false, message: err.message });
    }
  });
});

// –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function sendFilters(socket) {
  try {
    const filters = await dbService.getFilters();
    socket.emit("filters", filters);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:", err.message);
    socket.emit("filters", { pipelines: [], stages: [] });
  }
}

// ==== –°—Ç–∞—Ä—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ====
async function startupSync() {
  try {
    await syncService.startupSync();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error.message);
  }
}

function runScheduledJobs() {
  let dealsInterval, phonesInterval;
  
  // 1. –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å
  dealsInterval = setInterval(async () => {
    try {
      console.log("‚è∞ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫...");
      await loadDeals(0, false);
      console.log("‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫:", err.message);
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
      if (err.message.includes('Database connection failed')) {
        clearInterval(dealsInterval);
        console.error("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î");
      }
    }
  }, config.sync.dealsInterval);

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
  phonesInterval = setInterval(async () => {
    try {
      console.log("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤...");
      const allContactIds = await dbService.getAllContactIds();
      await loadContactsBatch(allContactIds);
      console.log("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    } catch (err) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:",
        err.message
      );
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
      if (err.message.includes('Database connection failed')) {
        clearInterval(phonesInterval);
        console.error("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î");
      }
    }
  }, config.sync.phonesInterval);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  return { dealsInterval, phonesInterval };
}

const PORT = config.server.port;
let scheduledJobs;

server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} –≤ —Ä–µ–∂–∏–º–µ ${config.server.nodeEnv}`);
  startupSync();
  scheduledJobs = runScheduledJobs();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  switch (error.code) {
    case 'EACCES':
      console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

// Graceful shutdown
async function gracefulShutdown(signal) {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...`);
  
  try {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    if (scheduledJobs) {
      if (scheduledJobs.dealsInterval) clearInterval(scheduledJobs.dealsInterval);
      if (scheduledJobs.phonesInterval) clearInterval(scheduledJobs.phonesInterval);
      console.log('‚èπÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    if (syncService) await syncService.close();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server.close(() => {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç');
      process.exit(0);
    });
    
    // –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
      console.error('‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞');
      process.exit(1);
    }, 10000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error.message);
    process.exit(1);
  }
}

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

const Bitrix24API = require('../utils/bitrix24');
const DatabaseService = require('./database');
const { config } = require('../config');

class SyncService {
  constructor(databaseService) {
    this.bitrix = new Bitrix24API();
    this.db = databaseService; // –ü—Ä–∏–Ω–∏–º–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑–≤–Ω–µ
    this.isSyncing = false;
    this.maxRecursionDepth = 10; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–∏
    this.currentRecursionDepth = 0;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  normalizePhones(rawPhones) {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!Array.isArray(rawPhones)) {
      return [];
    }

    const seen = new Set();
    const result = [];

    for (const phone of rawPhones) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞
      if (!phone || typeof phone !== 'object' || !phone.VALUE) {
        continue;
      }

      const orig = String(phone.VALUE);
      const digits = orig.replace(/\D/g, '');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞
      if (digits.length < 7) {
        continue;
      }

      const norm = '+' + digits;

      if (seen.has(norm)) {
        if (phone.ID) {
          result.push({ ID: phone.ID, OPERATION: 'DELETE' });
        }
        continue;
      }

      seen.add(norm);

      if (orig !== norm && phone.ID) {
        result.push({ ID: phone.ID, OPERATION: 'DELETE' });
        result.push({ VALUE: norm, VALUE_TYPE: phone.VALUE_TYPE || 'WORK' });
      } else {
        result.push({ VALUE: norm, VALUE_TYPE: phone.VALUE_TYPE || 'WORK' });
      }
    }

    return result;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫ —Å –æ—á–∏—Å—Ç–∫–æ–π —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
  async loadPipelines() {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ—Ä–æ–Ω–æ–∫...');
      const response = await this.bitrix.getPipelines();
      const pipelines = response.result.categories;
      
      if (pipelines && pipelines.length > 0) {
        const columns = ['id', 'name'];
        const values = pipelines.map(p => [p.id, p.name]);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID –≤–æ—Ä–æ–Ω–æ–∫ –∏–∑ –ë–î
        const existingPipelines = await this.db.getPipelineIds();
        const existingIds = new Set(existingPipelines.map(p => p.id));
        const newIds = new Set(pipelines.map(p => p.id));
        
        // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–æ—Ä–æ–Ω–∫–∏
        const deletedIds = existingIds.filter(id => !newIds.has(id));
        
        if (deletedIds.length > 0) {
          console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${deletedIds.length} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–æ—Ä–æ–Ω–æ–∫ –∏–∑ –ë–î`);
          await this.db.deletePipelines(deletedIds);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        await this.db.batchInsert('pipelines', columns, values, ['id']);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pipelines.length} –≤–æ—Ä–æ–Ω–æ–∫, —É–¥–∞–ª–µ–Ω–æ ${deletedIds.length} —Å—Ç–∞—Ä—ã—Ö`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Ä–æ–Ω–æ–∫:', error.message);
      throw error;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–¥–∏–π —Å –æ—á–∏—Å—Ç–∫–æ–π —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
  async loadStages() {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–¥–∏–π...');
      
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ Bitrix24
      const allStages = [];
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞–¥–∏–∏
      const mainStages = await this.bitrix.getStages('DEAL_STAGE');
      if (mainStages.result) {
        const mainStageValues = mainStages.result.map(s => [s.STATUS_ID, s.NAME, 0]);
        allStages.push(...mainStageValues);
      }

      // –°—Ç–∞–¥–∏–∏ –ø–æ –≤–æ—Ä–æ–Ω–∫–∞–º
      const pipelines = await this.db.getPipelineIds();
      for (const pipe of pipelines) {
        try {
          const response = await this.bitrix.getStages(`DEAL_STAGE_${pipe.id}`);
          if (response.result) {
            const stageValues = response.result.map(s => [s.STATUS_ID, s.NAME, pipe.id]);
            allStages.push(...stageValues);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞–¥–∏–∏ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏ ${pipe.id}:`, error.message);
        }
        await this.delay(config.sync.delayBetweenRequests);
      }

      if (allStages.length > 0) {
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞–¥–∏–∏ –∏–∑ –ë–î
        const existingStages = await this.db.getAllStageIds();
        const existingIds = new Set(existingStages.map(s => s.stage_id));
        const newIds = new Set(allStages.map(s => s[0]));
        
        // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–¥–∏–∏
        const deletedIds = existingIds.filter(id => !newIds.has(id));
        
        if (deletedIds.length > 0) {
          console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${deletedIds.length} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–¥–∏–π –∏–∑ –ë–î`);
          await this.db.deleteStages(deletedIds);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        const columns = ['stage_id', 'stage_name', 'pipeline_id'];
        await this.db.batchInsert('stages', columns, allStages, ['stage_id']);
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allStages.length} —Å—Ç–∞–¥–∏–π, —É–¥–∞–ª–µ–Ω–æ ${deletedIds.length} —Å—Ç–∞—Ä—ã—Ö`);
      }

      console.log('‚úÖ –í—Å–µ —Å—Ç–∞–¥–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–¥–∏–π:', error.message);
      throw error;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ batch
  async loadContactsBatch(contactIds) {
    if (contactIds.length === 0) return;

    try {
      const chunks = this.chunkArray(contactIds, config.sync.batchSize);
      let processedCount = 0;
      
      for (const chunk of chunks) {
        try {
          const response = await this.bitrix.getContacts(chunk);
          
          if (response.result) {
            const contacts = response.result.map(contact => {
              const normalizedPhones = this.normalizePhones(contact.PHONE);
              const firstValidPhone = normalizedPhones.find(p => !p.OPERATION)?.VALUE || null;
              
              return {
                ...contact,
                phone: firstValidPhone,
                link: this.bitrix.createEntityUrl('contact', contact.ID)
              };
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ Bitrix24 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await this.updateContactsInBitrix(contacts);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
            await this.db.upsertContacts(contacts);
            
            processedCount += contacts.length;
          }
        } catch (chunkError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ chunk –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:`, chunkError.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º chunk'–æ–º
          continue;
        }

        await this.delay(config.sync.delayBetweenRequests);
      }
      
      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ ${contactIds.length}`);
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ batch –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error.message);
      throw error;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Bitrix24
  async updateContactsInBitrix(contacts) {
    const updatePromises = contacts.map(async (contact) => {
      const normalizedPhones = this.normalizePhones(contact.PHONE);
      if (JSON.stringify(contact.PHONE) !== JSON.stringify(normalizedPhones)) {
        try {
          await this.bitrix.updateContact(contact.ID, { PHONE: normalizedPhones });
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç ${contact.ID}:`, error.message);
        }
      }
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.allSettled –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const results = await Promise.allSettled(updatePromises);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const successful = results.filter(r => r.status === 'fulfilled').length;
    const failed = results.filter(r => r.status === 'rejected').length;
    
    if (failed > 0) {
      console.warn(`‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} —Å –æ—à–∏–±–∫–∞–º–∏`);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫
  async loadDeals(start = 0, manual = false) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (this.isSyncing) {
      console.log('‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏
    if (this.currentRecursionDepth >= this.maxRecursionDepth) {
      console.warn(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ (${this.maxRecursionDepth}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É`);
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.isSyncing = true;
    this.currentRecursionDepth++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
    const syncTimeout = setTimeout(() => {
      if (this.isSyncing) {
        console.warn('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        this.isSyncing = false;
        this.currentRecursionDepth = 0;
      }
    }, 300000); // 5 –º–∏–Ω—É—Ç
    
    try {
      console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫... start = ${start}`);
      
      const response = await this.bitrix.getDeals(start);
      const deals = response.result;
      
      if (!deals || deals.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
      }

      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${deals.length} —Å–¥–µ–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ start=${start}`);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è batch –≤—Å—Ç–∞–≤–∫–∏
      const preparedDeals = deals.map(deal => ({
        ...deal,
        link: this.bitrix.createEntityUrl('deal', deal.ID)
      }));

      // Batch –≤—Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–æ–∫
      await this.db.upsertDeals(preparedDeals);

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π —Å–¥–µ–ª–∫–∞-–∫–æ–Ω—Ç–∞–∫—Ç
      const contactIdsToLoad = new Set();
      
      for (const deal of deals) {
        try {
          const relations = await this.bitrix.getDealContacts(deal.ID);
          if (relations.result) {
            await this.db.upsertDealContacts(deal.ID, relations.result);
            
            // –°–æ–±–∏—Ä–∞–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è batch –∑–∞–≥—Ä—É–∑–∫–∏
            relations.result.forEach(rel => {
              if (rel.CONTACT_ID) {
                contactIdsToLoad.add(Number(rel.CONTACT_ID));
              }
            });
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π –¥–ª—è —Å–¥–µ–ª–∫–∏ ${deal.ID}:`, error.message);
        }

        await this.delay(config.sync.delayBetweenRequests);
      }

      // Batch –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      if (contactIdsToLoad.size > 0) {
        console.log(`üë• –ó–∞–≥—Ä—É–∂–∞–µ–º ${contactIdsToLoad.size} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...`);
        await this.loadContactsBatch(Array.from(contactIdsToLoad));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const next = response.next;
      if (typeof next === 'number' && next > 0) {
        await this.delay(500);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º setImmediate –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ event loop
        setImmediate(() => this.loadDeals(next, manual));
      } else {
        console.log('‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–¥–µ–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', error.message);
      throw error;
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      clearTimeout(syncTimeout);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.isSyncing = false;
      this.currentRecursionDepth--;
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  chunkArray(array, size) {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!Array.isArray(array) || size <= 0) {
      return [];
    }
    
    const chunks = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  async startupSync() {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
      const dbConnected = await this.db.testConnection();
      if (!dbConnected) {
        throw new Error('Database connection failed');
      }

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
      await Promise.all([
        this.loadPipelines(),
        this.loadStages()
      ]);

      // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º setImmediate –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      setImmediate(() => this.loadDeals(0, true));
      
      console.log('‚úÖ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞
  async close() {
    await this.db.close();
  }
}

module.exports = SyncService;
